name: build and deploy snapshots
on: [push]
jobs:
  build:
    if: github.repository == 'QW-Group/mvdsv'
    runs-on: ${{ matrix.base-image }}
    strategy:
      fail-fast: false
      matrix:
       target: [linux-amd64, linux-i686, linux-armhf, linux-aarch64, windows-x64, windows-x86]
       include:
         - target: linux-amd64
           os: linux
           arch: amd64
           base-image: ubuntu-latest
           build-image: amd64/debian:stable
           ext: ""
         - target: linux-i686
           os: linux
           arch: i386
           base-image: ubuntu-latest
           build-image: i386/debian:stable
           ext: ""
         - target: linux-armhf
           os: linux
           arch: arm/v7
           base-image: ubuntu-latest
           build-image: arm32v7/debian:stable
           ext: ""
         - target: linux-aarch64
           os: linux
           arch: arm64
           base-image: ubuntu-latest
           build-image: arm64v8/debian:stable
           ext: ""
         - target: windows-x64
           os: windows
           arch: x64
           base-image: ubuntu-latest
           ext: ".exe"
         - target: windows-x86
           os: windows
           arch: x86
           base-image: ubuntu-latest
           ext: ".exe"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.os == 'linux'
      - name: Prepare Build Environemnt
        shell: bash
        run: sudo apt-get update -qq && sudo apt-get -qq --no-install-recommends install build-essential cmake gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 libpcre2-dev
        if: matrix.os == 'windows'
      - name: Build
        run: |
          if ${{ matrix.os  == 'linux' }}; then
            docker run --platform linux/${{ matrix.arch }} --net=host --rm --device /dev/fuse -v $PWD:/mvdsv -w /mvdsv ${{ matrix.build-image }} bash -c -e '
              set -e
              apt-get -qq update
              apt-get -qq --no-install-recommends install cmake build-essential libcurl4-openssl-dev libpcre2-dev ninja-build
              ./build_cmake.sh ${{ matrix.target }}
              chown -R '$(id -u ${USER})':'$(id -g ${USER})' build/${{ matrix.target }} || exit 3
            '
          else
            ./build_cmake.sh ${{ matrix.target }}
          fi
      - name: Create checksum
        run: |
             md5sum build/${{ matrix.target }}/mvdsv${{ matrix.ext }} > build/${{ matrix.target }}/mvdsv.md5
      - name: Setup SSH
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
      - name: Set date
        run: |
          echo "DATE=$(TZ="Europe/Amsterdam" date "+%Y%m%d-%H%M%S")" >> $GITHUB_ENV
      - name: Deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
             mkdir -p upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}
             mkdir -p upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}
             cp build/${{ matrix.target }}/mvdsv${{ matrix.ext }} upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.DATE }}_${GITHUB_SHA::7}_mvdsv${{ matrix.ext }}
             cp build/${{ matrix.target }}/mvdsv.md5 upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.DATE }}_${GITHUB_SHA::7}_mvdsv.md5
             cp build/${{ matrix.target }}/mvdsv${{ matrix.ext }} upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/mvdsv${{ matrix.ext }}
             cp build/${{ matrix.target }}/mvdsv.md5 upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/mvdsv.md5
             sftp -rp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null' -P ${{ secrets.SFTP_PORT }} ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }}:/snapshots <<< $'put -rp upload/snapshots/*'
